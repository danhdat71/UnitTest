============ Bài 1: Giới thiệu khóa học UnitTesting ============

============ Bài 2: Cài đặt composer với PHP vào máy ============
Do em dùng Window nên em bỏ qua bài 3,4 (Cài trên môi trường MacOS và Linux)
- Bước 1: Cài đặt PHP, em đã cài XAMPP nên đã tích hợp sẵn cài đặt PHP vào Window. Kiểm
tra phiên bản php dùng command: php -v. Em dùng php 8.1.4
- Bước 2: Tải file Composer theo đường dẫn : https://getcomposer.org/download/, ấn chọn tải file exe.
- Bước 3: Install composer vào Window, lưu ý là chọn đường dẫn trỏ tới file php trong thư mục Xampp/Php/Php.exe
- Bước 3: Tiếp tục ấn next cho tới khi hoàn tất.
- Bước 4: Kiểm tra composer cài thành công bằng cách gõ: composer. Nếu màn hình CMD hiển thị các
tùy chọn nghĩa là đã hoàn tất.

============ Bài 5: Tạo project và cài đặt PHPUnit ============
- Tạo project tên tùy chọn. Ví dụ là UnitTest.
- Dùng composer để cài đặt package PHPUnit bằng cách gõ lệnh:
composer require --dev phpunit/phpunit
- Tùy vô phiên bản php thì nó tự cài phiên bản package tương ứng. Của em nó cài phpunit 9.5.20

============ Bài 6: Tạo và chạy thử bài test đầu tiên ============

use PHPUnit\Framework\TestCase;

class Test extends TestCase
{
    public function TestEqualsResult()
    {
        $this->assertEqual(2, 1+1);
    }
}

Chạy comand line: vendor/bin/phpunit Test.php

Kết quả:
OK(1 test, 1 assert): 1 hàm test, 1 gọi hàm assert

============ Bài 7: Test multiple assertion ============

function add($a, $b)
{
    return $a+$b;
}

use PHPUnit\Framework\TestCase;

class Test extends TestCase
{
    public function TestEqualsResult()
    {
        $this->assertEqual(2, add(1, 1));
        $this->assertEqual(4, add(2, 2));
    }
}

- hàm TestEqualsResult là hàm dùng để kiểm tra hàm add() có trả về kết quả giống mong muốn không.

Kết quả:
OK(1 test, 2 assert): 1 hàm test, 2 gọi hàm assert


============ Bài 8: Test multiple assertion, kiểm trả trả về không chính xác ============

function add($a, $b)
{
    return $a+$b;
}

use PHPUnit\Framework\TestCase;

class Test extends TestCase
{
    public function testAddDoesNotReturnIncorrectSum()
    {
        $this->assertNotEqual(3, add(1, 1));
    }
}

- Hàm testAddDoesNotReturnIncorrectSum là hàm test xem hàm add trả về kết quả sai không.

Kết quả:
OK(1 test, 1 assert): 1 hàm test, 1 gọi hàm assert

============ Bài 9: Test class ============

- Bước 1: Tạo 1 class User.
class User{
    public $firstName = null;
    public $lastName = null;

    public function __construct($firstName = null, $lastName = null)
    {
        $this->firstName = $firstName;
        $this->lastName = $lastName;
    }

    public function getFullName()
    {
        return trim($this->firstName . " " .$this->lastName);
    }
}

- Bước 2: Tạo class để test class User. Đặt tên là TestUser.
class TestUser{
    public function testFullName()
    {
        $user = new User("Danh", "Đạt");
        $this->assertEqual("Danh Dat", $user->getFullName());
    }

    public function testDefaultEmpty()
    {
        $user = new User();
        $this->assertEqual("", $user->getFullName());
    }
}

- Hàm testFullName: mục địch là để kiểm trả fullName trả về có giống như mong muốn.

Kết quả:
OK(1 test, 1 assert): 1 hàm testFullName, 1 gọi hàm assert


============ Bài 10: Cách đặt tên hàm test ============

use PHPUnit\Framework\TestCase;

class Test extends TestCase
{
    public function hasFirstName()
    {
        $user = new User();
        $user->firstName = "TEST";
        $this->assertEqual("TEST", $user->firstName);
    }
}


- Sau khi chạy vendor/bin/phpunit Test thì hàm hasFirstName không chạy do không có "test" ở
đầu tên hàm.
- Có thể đặt tên hàm theo kiểu testCarmelCase hoặc test_snake_case

============ Bài 11: Chạy test theo ý muốn ============
- Chạy class test: vendor/bin/phpunit THƯ_MỤC/TÊN_FILE.php
- Chạy nhiều file bên trong thư mục: vendor/bin/phpunit THƯ_MỤC/
- Chạy theo hàm chỉ định: vendor/bin/phpunit THƯ_MỤC/ --filter=tên_Hàm
- Show kết quả có màu: vendor/bin/phpunit THƯ_MỤC/ --color


============ Bài 13: Sử dụng autoload với composer ============

- Tạo thư mục ví dụ tên là src.
- Tạo các file class vào thư mục src
- Tạo autload vào file composer.json:
{
 "autoload": {
   "psr-4": {
      "App\\" : "src"
    }
  }
}

"App\\": Đường dẫn gốc namespace
"src" : Đường dẫn thư mục nơi chứa file cần gọi

- Đặt namespace App; vào các class cần test mục đích để tiện gọi vào file test. Ví dụ:

* File src/User.php
namespace App;
class User{
  public function run(){
     return "Hello World";
  }
}

* File test user
use App\User;
require 'vendor/autoload.php';
class TestUser{
  public function testRunHelloWorld(){
    $user = new User();
    $this->assertEqual("Hello World", $user->run());
  }
}
- Chạy phpunit --bootstrap='vendor/autoload.php' : chạy câu lệnh đăng ký require 'vendor/autoload' vào các file để chạy autoload
- Chạy câu lệnh composer dump-autoload


============ Bài 14, 15: Test Queue Class ============

Test queue:

- Tạo file demo queue:
namespace App;

class Queue
{
    public $items = [];
    public function push($item)
    {
        $this->items[] = $item;
    }
    public function pop()
    {
        return array_pop($this->items);
    }
    public function getCount()
    {
        return count($this->items);
    }
}

- Tạo file TestQueue để test file Queue:


use PHPUnit\Framework\TestCase;
use App\Queue;

class QueueTest extends TestCase
{
    protected $queueClass;

    //Hàm set up dùng để tạo dựng 1 đối tượng dùng chung trong class
    //Thay vì phải tạo new Class trong mỗi function
    public function setUp() : void
    {
        $this->queueClass = new Queue;
    }

    //Hàm tearDown để gỡ bỏ đối tượng dùng chung đó.
    public function tearDown() : void
    {
        unset($this->queueClass);
    }

    // Hàm test khởi tạo queue là rỗng
    public function testNewQueueIsEmpty()
    {
        $this->assertEquals(0, $this->queueClass->getCount());
    }

    //Hàm test khi đẩy 1 item vào queue và sẽ trả về đếm queue là 1
    public function testAnItemIsAddedToTheQueue()
    {
        $this->queueClass->push("Green");
        $this->assertEquals(1, $this->queueClass->getCount());
    }

    //Hàm pop các item khỏi queue, sau khi pop các item thì queue sẽ trả về rỗng
    public function testPopIsSuccess()
    {
        $this->queueClass->push("green");
        $this->queueClass->pop();
        $this->assertEmpty($this->queueClass->items);
    }
}


============ Bài 16: Kiến thức về hàm setUp và tearDown ============

- Hàm setUp và tearDown được khai báo theo public hoặc protected
- Hàm setUp sẽ được chạy trước các hàm test bên trong testClass
- Hàm tearDown sẽ chạy sau khi chạy các hàm test. Hàm tearDown thường unset các
khai báo class. Hàm này thường ít dùng nhưng nên dùng trong khai báo nhiều class vào hàm setUp.
Mục đích là tránh bị leak memory


============ Bài 17: Easily add a new test method using the test fixture ============

- Test phần tử được xóa ở đầu của queue không

* File queue
namespace App;

class Queue
{
    public $items = [];

    public function push($item)
    {
        $this->items[] = $item;
    }

    public function pop()
    {
        return array_pop($this->items);
    }

    public function getCount()
    {
        return count($this->items);
    }
}

* File để test Queue.php
use PHPUnit\Framework\TestCase;
use App\Queue;

class QueueTest extends TestCase
{
    public function testAnItemRemovedFrontTheFrontOfTheQueue()
    {
        $this->queueClass->push('first');
        $this->queueClass->push('second');

        //Mong muốn hàm pop trong class phải là first
        $this->assertEquals('first', $this->queueClass->pop());
    }
}

- Kết quả trả về không như mong đợi

- Tiến hành fix bug vào file Queue.php
- Do hàm push bên trong file queue dồn các phần tử vào mảng ở vị trí cuối của mảng
và hàm pop vừa xóa và trả về phần tử cuối mảng => "first" != "second"
- Fix bug bằng cách sửa hàm array_pop => array_shift
- Hàm array_shift xóa phần tử ở đầu mảng